#!/bin/bash
[ -n "$H_GUARD_CONFIGER" ] && return
readonly H_GUARD_CONFIGER=1

CONFIGFILE=".lysithea.conf"

source "$(realpath $(dirname $0))/includes/errors"
source "$(realpath $(dirname $0))/includes/utils"

function init_config() {
  if ! [ -f "$CONFIGFILE" ]; then
    printf "[+] creating lysithea config file: %s\n" "$CONFIGFILE"
    echo >"$CONFIGFILE" "### lysithea configuration file ###"
  fi
}

function find_config() {
  if [ $# -ne 1 ]; then
    return 1 # invalid args
  fi
  if ! [ -f "$CONFIGFILE" ]; then
    return 2 # config file not found
  fi

  while IFS= read -r cline; do
    if ! [[ $cline == "#"* ]]; then
      local config_name config_value
      config_name=$(cut -d '=' -f 1 <<<$cline)
      config_value=$(cut -d '=' -f 2 <<<$cline)
      if [ -z $config_name ] || [ -z $config_value ]; then
        continue # just skip invalid line
      fi

      if [ "$1" = "$config_name" ]; then
        echo $config_value
        break
      fi
    fi
  done <"$CONFIGFILE"

  return 0
}

function set_all_configs() {
  if ! [ -f "$CONFIGFILE" ]; then
    return 2 # config file not found
  fi

  while IFS= read -r cline; do
    if ! [[ $cline == "#"* ]]; then
      local config_name config_value
      config_name=$(cut -d '=' -f 1 <<<$cline)
      config_value=$(cut -d '=' -f 2 <<<$cline)
      if [ -z $config_name ] || [ -z $config_value ]; then
        "[-] invalid config line: %s" >&2 $cline
        return 3 # invalid line
      fi

      printf -v "$config_name" "%s" "$config_value"
    fi
  done <"$CONFIGFILE"

  return 0
}

function read_config() {
  if [ $# -ne 1 ]; then
    return 1
  fi

  local tmpvalue
  tmpvalue=$(find_config $1)
  if [ $? -ne 0 ]; then
    _error_exit "$OPERATION_FAILED" "error while reading configuration file: %s" "$CONFIGFILE"
  fi
  if [ -z "$tmpvalue" ]; then
    return 1 # not found
  fi

  printf -v "$1" "%s" "$tmpvalue"
  return 0
}

function write_config() {
  if [ $# -ne 2 ]; then
    return 1
  fi

  init_config

  existing_one=$(find_config "$1") || return $?
  if [ -n "$existing_one" ]; then
    vecho "[.] overwriting exising config line."
    existing_one=$(printf '%s\n' "$existing_one" | sed -e 's/[\/&]/\\&/g')
    new_one=$(printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g')
    sed -i "s/$1=$existing_one/$1=$new_one/" $CONFIGFILE || return 1
  else
    echo >>$CONFIGFILE "$1=$2"
  fi

  return 0
}
