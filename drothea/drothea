#!/bin/sh

#######################
#
# Drothea
#
# Small kernel configuration checker for CTF kernel pwn challenges.
#
# Drothea assumes to be used by sh in busybox, ash implementation.
# Error handling is not well done intentionally. Just ignore or exit when error.
#
#######################

VERSION=1.0.0

### Utilities #########

vecho() {
  if [ -n "$VERBOSE" ]; then
    echo "$@"
  fi
}

### END Utilities #####

### Tests #############

test_mmap_min() {
  local SAFE_MIN_ADDR="4096"
  local min_addr="$(cat /proc/sys/vm/mmap_min_addr)"
  if ! [ "$SAFE_MIN_ADDR" -ge "$min_addr" ]; then
    echo "[!] mmap_min_addr is smaller than $SAFE_MIN_ADDR: $min_addr"
  fi
}

test_oops_panic() {
  cmdline="$(cat /proc/cmdline)"
  if [ "${cmdline#*oops=panic}" = "$cmdline" ]; then
    echo "[!] Oops doesn't mean panic."
    vecho "\tyou mignt be able to leak info by invoking crash."
  fi
}

test_smep_enabled() {
  cpui="$(cat /proc/cpuinfo)"
  if [ "${cpui#*smep}" = "$cpui" ]; then
    echo "[!] SMEP is disabled."
  fi
}

test_smap_enabled() {
  cpui="$(cat /proc/cpuinfo)"
  if [ "${cpui#*smap}" = "$cpui" ]; then
    echo "[!] SMAP is disabled."
  fi
}

test_unprivileged_ebpf() {
  bpfi="$(cat /proc/sys/kernel/unprivileged_bpf_disabled)"
  if [ "0" = "$bpfi" ]; then
    echo "[!] unprivileged ebpf installation is enabled."
  fi
}

utest_kaslr_enabled() {
  cmdline="$(cat /proc/cmdline)"
  if [ "${cmdline#*nokaslr}" = "$cmdline" ]; then
    echo "[?] KASLR seems enabled. Should turn off for debug purpose."
  fi
}

utest_kptr_restrict() {
  symbols="$(cat /proc/kallsyms | head -n1)"
  bad_addr="0000000000000000"
  if [ "${symbols#*$bad_addr}" != "$symbols" ]; then
    echo "[?] kptr seems restricted. Should try 'echo 0 > /proc/sys/kernel/kptr_restrict' in init script."
  fi
}

### END Tests #########

### Main ##############

run_ingrid() {
  if [ -f ingrid ]; then
    if [ -n "$VERBOSE" ]; then
      ./ingrid --verbose
    else
      ./ingrid
    fi
  fi
}

# Each test should exec test and print output if needed by itself.
do_tests() {
  # kernel exploitable configuration
  test_mmap_min
  test_oops_panic
  test_smep_enabled
  test_smap_enabled
  test_unprivileged_ebpf

  # debug configuration
  utest_kaslr_enabled
  utest_kptr_restrict

  # Run ingrid
  run_ingrid
}

parse_arguments() {
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
    --verbose)
      VERBOSE=1
      shift
      ;;
    *)
      echo "[ERROR] unknown argument: $1"
      exit 1
    ;;
    esac
  done
}

check_root() {
  if [ "0" = "$(id -u)" ]; then
    return 0
  else
    return 1
  fi
}

main() {
  parse_arguments "$@"

  vecho "Drothea v$VERSION"
  check_root || { echo "[ERROR] Drothea require root priviledge."; exit 1; }
  do_tests
}

### END Main ##############

main "$@"
