#!/bin/bash
[ -n "$H_GUARD_GITTER" ] && return
readonly H_GUARD_GITTER=1

LYSITHEA_HISTORY=.lysithea.log
GIT_FORMAT="[lysithea] (auto-generated)"

function init_git() {
  GIT_TARGETS=( "$EXPLOIT.c"  "$LYSITHEA_HISTORY" ".gitignore" )

  if [ -z "$(which git)" ]; then
    _error_exit "$FILE_NOT_FOUND" "git is not installed"
  fi

  if [ -d .git ] ; then
    echo "[-] git is already inited. skipping"
    return
  fi

  git init
  printf "# [Auto generated by lysithea]\n*\n!%s\n!%s\n!%s\n" "$EXPLOIT.c" "$LYSITHEA_HISTORY" ".gitignore" > .gitignore
  git add .
  git commit -m "[lysithea] initial commit"
  echo "[+] initiated git environment"
}

function hook_exploit() {
  trap exploit_callback INT
}

function exploit_callback() {
  echo "[+] saving exploit log..."

  if ! [ -d .git ] ; then
    _error_exit "$FILE_NOT_FOUND" "git is not inited. Run 'lysithea init' first."
  fi

  git add .
  git commit -m "$(printf $GIT_FORMAT)"
}

function list_logs() {
  local logs
  readarray -t logs < <(git log | grep Date | sed 's/Date://')
  for i in "${!logs[@]}"; do
    printf "%d\t: %s\n" "$i" "${logs[$i]}"
  done
}

function get_log_single() {
  if [ $# -ne 1 ]; then
    _error_exit "$INVALID_ARGS" "# of args passed to get_log_single() is invalid"
  fi

  local target_index="$1"
  git show HEAD~"$target_index":$LYSITHEA_HISTORY
}

function do_get_log_all() {
  local dates hashes
  readarray -t dates < <(git log | grep Date | sed 's/Date://')
  readarray -t hashes < <(git log | grep -e commit | sed 's/commit //')
  for i in "${!dates[@]}"; do
    printf "\n\n%d\t: %s\n" "$i" "${dates[$i]}"
    echo "==================================================="
    git --no-pager show "${hashes[$i]}":"$LYSITHEA_HISTORY"
  done
}

function get_log_all() {
  output=$(do_get_log_all)
  if [ -n "$SHOW_LOG_NO_PAGER" ]; then
    echo "$output"
  else
    less -R < <(echo "$output")
  fi
}
